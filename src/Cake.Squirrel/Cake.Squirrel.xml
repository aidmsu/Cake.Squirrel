<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cake.Squirrel</name>
    </assembly>
    <members>
        <member name="T:Cake.Squirrel.SquirrelAliases">
            <summary>
            Contains functionality related to running Squirrel.
            </summary>
        </member>
        <member name="M:Cake.Squirrel.SquirrelAliases.Squirrel(Cake.Core.ICakeContext,Cake.Core.IO.FilePath)">
            <summary>
            Runs Squirrel Releasify against the specified NuGet package.
            </summary>
            <example>
            <code>
            #tool "Squirrel.Windows" 
            #addin Cake.Squirrel
            
            Task("PackageNoSettings")
             .Does(() => {
               Squirrel(File("Package.nupkg"));
            });
            </code>
            </example>
            <param name="context">The context.</param>
            <param name="nugetPackage">NuGet package to releasify.</param>
        </member>
        <member name="M:Cake.Squirrel.SquirrelAliases.Squirrel(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Squirrel.SquirrelSettings)">
            <summary>
            Runs Squirrel Releasify against the specified NuGet package
            using the specified settings.
            </summary>
            <example>
            <code>
            #tool "Squirrel.Windows" 
            #addin Cake.Squirrel
            
            Task("PackageWithSettings")
             .Does(() => {
               var settings = new SquirrelSettings();
               settings.NoMsi = true;
               settings.Silent = true;
            
               Squirrel(File("Package.nupkg"), settings);
            });
            </code>
            </example>
            <param name="context">The context.</param>
            <param name="nugetPackage">NuGet package to releasify.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Squirrel.SquirrelAliases.Squirrel(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Squirrel.SquirrelSettings,System.Boolean,System.Boolean)">
            <summary>
            Runs Squirrel Releasify against the specified NuGet package
            using the specified settings, if output should be redirected, and 
            if it should be silent.
            </summary>
            <example>
            <code>
            #tool "Squirrel.Windows" 
            #addin Cake.Squirrel
            
            Task("PackageWithSettings")
             .Does(() => {
               var settings = new SquirrelSettings();
               settings.NoMsi = true;
               settings.Silent = true; 
            
               Squirrel(File("Package.nupkg"), settings, true, false);
            });
            </code>
            </example>
            <param name="context">The context.</param>
            <param name="nugetPackage">NuGet package to releasify.</param>
            <param name="settings">The settings.</param>
            <param name="redirectStandardOutput">Sets if the output of an tool is written to the <see cref="P:System.Diagnostics.Process.StandardOutput"/> stream.</param>
            <param name="silent">Sets if the tool output should be suppressed.</param>
        </member>
        <member name="M:Cake.Squirrel.SquirrelAliases.SyncReleases(Cake.Core.ICakeContext,Cake.Squirrel.SyncReleasesSettings)">
            <summary>
            Runs SyncReleases using the specified settings.
            </summary>
            <example>
            <code>
            #tool "Squirrel.Windows" 
            #addin Cake.Squirrel
            
            Task("SyncReleases")
             .Does(() => {
               var settings = new SyncReleasesSettings {
                   ReleaseDirectory = "pathToDirectory"
                   Url = new Uri("https://someurl.com");
                   Token = "myToken"
               }; 
            
               SyncReleases(settings);
            });
            </code>
            </example>
            <param name="context">The context.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Squirrel.SquirrelAliases.SyncReleases(Cake.Core.ICakeContext,Cake.Squirrel.SyncReleasesSettings,System.Boolean,System.Boolean)">
            <summary>
            Runs SyncReleases using the specified settings, if output should be redirected, and 
            if it should be silent.
            </summary>
            <example>
            <code>
            #tool "Squirrel.Windows" 
            #addin Cake.Squirrel
            
            Task("SyncReleases")
             .Does(() => {
               var settings = new SyncReleasesSettings {
                   ReleaseDirectory = "pathToDirectory"
                   Url = new Uri("https://someurl.com");
                   Token = "myToken"
               }; 
            
               SyncReleases(settings, true, false);
            });
            </code>
            </example>
            <param name="context">The context.</param>
            <param name="settings">The settings.</param>
            <param name="redirectStandardOutput">Sets if the output of an tool is written to the <see cref="P:System.Diagnostics.Process.StandardOutput"/> stream.</param>
            <param name="silent">Sets if the tool output should be suppressed.</param>
        </member>
        <member name="T:Cake.Squirrel.SquirrelRunner">
            <summary>
            The Squirrel package runner.
            </summary>
        </member>
        <member name="M:Cake.Squirrel.SquirrelRunner.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.Tooling.IToolLocator)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Squirrel.SquirrelRunner"/> class.
            </summary>
            <param name="fileSystem"></param>
            <param name="environment"></param>
            <param name="processRunner"></param>
            <param name="tools"></param>
        </member>
        <member name="M:Cake.Squirrel.SquirrelRunner.Run(Cake.Core.IO.FilePath,Cake.Squirrel.SquirrelSettings)">
            <summary>
            Executes Squirrel with the specificed parameters.
            </summary>
            <param name="nugetPackage">The nuget package.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Squirrel.SquirrelRunner.Run(Cake.Core.IO.FilePath,Cake.Squirrel.SquirrelSettings,Cake.Core.IO.ProcessSettings)">
            <summary>
             Executes Squirrel with the specificed parameters.
            </summary>
            <param name="nugetPackage">The nuget package.</param>
            <param name="settings">The settings.</param>
            <param name="processSettings">The process settings.</param>
        </member>
        <member name="M:Cake.Squirrel.SquirrelRunner.GetToolExecutableNames">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="M:Cake.Squirrel.SquirrelRunner.GetToolName">
            <summary>
            Gets the possible names of the tool executable.
            </summary>
            <returns>List of possible executable names.</returns>
        </member>
        <member name="T:Cake.Squirrel.SquirrelSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Squirrel.SquirrelRunner"/>.
            </summary>
        </member>
        <member name="M:Cake.Squirrel.SquirrelSettings.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Cake.Squirrel.SquirrelSettings"/> class.
            </summary>
        </member>
        <member name="P:Cake.Squirrel.SquirrelSettings.ReleaseDirectory">
            <summary>
                Gets or sets the release directory location.
            </summary>
            <value>
                Path to a release directory to use with releasify.
            </value>
        </member>
        <member name="P:Cake.Squirrel.SquirrelSettings.PackagesDirectory">
            <summary>
                Gets or sets the packages directory location.
            </summary>
            <value>
                Path to the NuGet Packages directory for C# apps
            </value>
        </member>
        <member name="P:Cake.Squirrel.SquirrelSettings.BootstrapperExe">
            <summary>
                Gets or sets the Setup.exe for boostrapping.
            </summary>
            <value>
                Path to the Setup.exe to use as a template
            </value>
        </member>
        <member name="P:Cake.Squirrel.SquirrelSettings.LoadingGif">
            <summary>
                Gets or sets the filepath to the loading gif.
            </summary>
            <value>
                Path to an animated GIF to be displayed during installation.
            </value>
        </member>
        <member name="P:Cake.Squirrel.SquirrelSettings.Icon">
            <summary>
                Gets or sets the filepath to the icon for shortcuts.
            </summary>
            <value>
                Path to an ICO file that will be used for icon shortcuts.
            </value>
        </member>
        <member name="P:Cake.Squirrel.SquirrelSettings.SetupIcon">
            <summary>
                Gets or sets the filepath to the setup executable's icon.
            </summary>
            <value>
                Path to an ICO file that will be used for the Setup executable's icon.
            </value>
        </member>
        <member name="P:Cake.Squirrel.SquirrelSettings.SigningParameters">
            <summary>
                Gets or sets the parameters to be passed to SignTool.exe.
            </summary>
            <value>
                Sign the installer via SignTool.exe with the parameters given
            </value>
        </member>
        <member name="P:Cake.Squirrel.SquirrelSettings.Silent">
            <summary>
                Gets or sets if it should be a silent install.
            </summary>
            <value>
                <c>true</c> if a silent install; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Squirrel.SquirrelSettings.ShortCutLocations">
            <summary>
                Gets or sets shortcut locations.
            </summary>
            <value>
                Comma-separated string of shortcut locations, e.g. 'Desktop,StartMenu'.
            </value>
        </member>
        <member name="P:Cake.Squirrel.SquirrelSettings.NoMsi">
            <summary>
                Gets or sets if an MSI package should be created.
            </summary>
            <value>
                <c>true</c> to not generate an MSI package; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Squirrel.SquirrelSettings.FrameworkVersion">
            <summary>
                Gets or sets the required .NET framework version
            </summary>
            <value>
                .NET framework version, e.g. net461
            </value>
        </member>
        <member name="P:Cake.Squirrel.SquirrelSettings.NoDelta">
            <summary>
            Gets or sets Don't generate delta packages to save time. 
            </summary>
            <value>
                <c>true</c> to not generate delta packages; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Cake.Squirrel.SyncReleasesRunner">
            <summary>
            The SyncReleases runner.
            </summary>
        </member>
        <member name="M:Cake.Squirrel.SyncReleasesRunner.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.Tooling.IToolLocator)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Squirrel.SyncReleasesRunner"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="tools">The tool locator.</param>
        </member>
        <member name="M:Cake.Squirrel.SyncReleasesRunner.Run(Cake.Squirrel.SyncReleasesSettings)">
            <summary>
            Executes SyncReleases with the specificed parameters.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Squirrel.SyncReleasesRunner.Run(Cake.Squirrel.SyncReleasesSettings,Cake.Core.IO.ProcessSettings)">
            <summary>
             Executes SyncReleases with the specificed parameters.
            </summary>
            <param name="settings">The settings.</param>
            <param name="processSettings">The process settings.</param>
        </member>
        <member name="M:Cake.Squirrel.SyncReleasesRunner.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="M:Cake.Squirrel.SyncReleasesRunner.GetToolExecutableNames">
            <summary>
            Gets the possible names of the tool executable.
            </summary>
            <returns>List of possible executable names.</returns>
        </member>
        <member name="T:Cake.Squirrel.SyncReleasesSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Squirrel.SyncReleasesRunner"/>.
            </summary>
        </member>
        <member name="P:Cake.Squirrel.SyncReleasesSettings.ReleaseDirectory">
            <summary>
                Gets or sets the release directory path to download to.
            </summary>
        </member>
        <member name="P:Cake.Squirrel.SyncReleasesSettings.Url">
            <summary>
            Gets or sets the URL to the remote releases folder. When pointing to GitHub, use the URL 
            to the repository root page, else point to an existing remote Releases folder
            </summary>
        </member>
        <member name="P:Cake.Squirrel.SyncReleasesSettings.Token">
            <summary>
            Gets or sets the OAth token to use as login credentials.
            </summary>
        </member>
    </members>
</doc>
